{"mode":"Text","hardwareTarget":"brain","textContent":"#pragma region VEXcode Generated Robot Configuration\n// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START V5 MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END V5 MACROS\n\n\n// Robot configuration code.\n\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  int systemTime = Brain.Timer.systemHighResolution();\n  double batteryCurrent = Brain.Battery.current();\n  double batteryVoltage = Brain.Battery.voltage(voltageUnits::mV);\n\n  // Combine these values into a single integer\n  int seed = int(batteryVoltage + batteryCurrent * 100) + systemTime;\n\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  //Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Helper to make playing sounds from the V5 in VEXcode easier and\n// keeps the code cleaner by making it clear what is happening.\nvoid playVexcodeSound(const char *soundName) {\n  printf(\"VEXPlaySound:%s\\n\", soundName);\n  wait(5, msec);\n}\n\n#pragma endregion VEXcode Generated Robot Configuration\n\n/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       {author}                                                  */\n/*    Created:      {date}                                                    */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n// Include the V5 Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n  // Begin project code\n  \n}\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Define the motors\nmotor FrontLeftMotor(PORT1, gearSetting::ratio18_1, false);\nmotor BackLeftMotor(PORT10, gearSetting::ratio18_1, false);\nmotor FrontRightMotor(PORT11, gearSetting::ratio18_1, true);\nmotor BackRightMotor(PORT20, gearSetting::ratio18_1, true);\nmotor MiddleLeftMotor(PORT5, gearSetting::ratio18_1, false);\nmotor MiddleRightMotor(PORT15, gearSetting::ratio18_1, true);\n\n// Define the controller\ncontroller controller_1;\n\n// Function to calculate velocity\ndouble calculateVelocity(double axis3, double axis1) {\n    double x = axis3 + axis1;\n    return 0.0001 * (x * x * x);\n}\n\n// Function to calculate the motor velocities\nvoid setMotorVelocities(double forward, double strafe, double turn) {\n    // Calculate base velocities\n    double velocity_x = calculateVelocity(forward, strafe);\n    double velocity_x_neg = calculateVelocity(forward, -strafe);\n\n    // Set velocities for each motor based on movement direction\n    FrontLeftMotor.setVelocity(velocity_x + turn, percentUnits::pct);\n    BackLeftMotor.setVelocity(velocity_x + turn, percentUnits::pct);\n    FrontRightMotor.setVelocity(velocity_x_neg - turn, percentUnits::pct);\n    BackRightMotor.setVelocity(velocity_x_neg - turn, percentUnits::pct);\n    MiddleLeftMotor.setVelocity(velocity_x + turn, percentUnits::pct);\n    MiddleRightMotor.setVelocity(velocity_x_neg - turn, percentUnits::pct);\n}\n\nint main() {\n    while (true) {\n        // Get the controller axis positions\n        double axis3_position = controller_1.Axis3.position(percent);\n        double axis1_position = controller_1.Axis1.position(percent);\n\n        // Determine movement directions\n        double forward = axis3_position;\n        double strafe = axis1_position;\n        double turn = (controller_1.Axis4.position(percent) / 100.0); // Assuming Axis4 is used for turning\n\n        // Set velocities based on controller inputs\n        setMotorVelocities(forward, strafe, turn);\n\n        // Spin each motor according to its calculated velocity\n        FrontLeftMotor.spin(directionType::fwd);\n        BackLeftMotor.spin(directionType::fwd);\n        FrontRightMotor.spin(directionType::fwd);\n        BackRightMotor.spin(directionType::fwd);\n        MiddleLeftMotor.spin(directionType::fwd);\n        MiddleRightMotor.spin(directionType::fwd);\n\n        // Allow time for the motors to update\n        vex::task::sleep(20); // Sleep for 20 milliseconds\n    }\n}\n\n\n","textLanguage":"cpp","robotConfig":[],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.3","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false}